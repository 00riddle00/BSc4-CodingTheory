
# Matrix multiplication
def mult(M,N):
    result = [[0 for j in range(len(N[0]))] for i in range(len(M))]

    for i in range(len(M)):
        for j in range(len(N[0])):
            for l in range(len(N)):
                result[i][j] = (result[i][j] + M[i][l] * N[l][j]) % q

    return result

def transpose(M):
    return [[M[i][j] for i in range(len(M))] for j in range(len(M[0]))]

def concat(M,N):
    return [M[i] + N[i] for i in range(len(M))]

def add_vectors(u,v):
    return [(u[i] + v[i]) % q for i in range(len(u))]

def subtract_vectors(u,v):
    return [(u[i] - v[i]) % q for i in range(len(u))]

# convert zs - lists of 12 elems -> to lists of 8 elems
def conv_list_12_to_8(zs):
    flat_zs = [item for sublist in zs for item in sublist]
    return [flat_zs[i:i + 8] for i in range(0, len(flat_zs), 8)]

ds = [
    [0,1,1,0,1,1,1,0,1,1,0,0,0,1,1,1,0,0,1,0,1,0,0,1],
    [0,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0],
    [1,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1,0,1,0,1,0,1],
    [1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1],
    [0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1],
    [0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1],
    [1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,0],
    [0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1],
    [0,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,1,1,0],
    [1,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,1,0,1,1,1],
    [1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1],
    [0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0],
    [0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1],
    [1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,1],
]

A = [
    [0,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,1,1,1,0,0,0,1,0],
    [1,1,0,1,1,1,0,0,0,1,0,1],
    [1,0,1,1,1,0,0,0,1,0,1,1],
    [1,1,1,1,0,0,0,1,0,1,1,0],
    [1,1,1,0,0,0,1,0,1,1,0,1],
    [1,1,0,0,0,1,0,1,1,0,1,1],
    [1,0,0,0,1,0,1,1,0,1,1,1],
    [1,0,0,1,0,1,1,0,1,1,1,0],
    [1,0,1,0,1,1,0,1,1,1,0,0],
    [1,1,0,1,1,0,1,1,1,0,0,0],
    [1,0,1,1,0,1,1,1,0,0,0,1],
]

I_12 = [
    [1,0,0,0,0,0,0,0,0,0,0,0],
    [0,1,0,0,0,0,0,0,0,0,0,0],
    [0,0,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,1,0,0,0,0,0,0,0,0],
    [0,0,0,0,1,0,0,0,0,0,0,0],
    [0,0,0,0,0,1,0,0,0,0,0,0],
    [0,0,0,0,0,0,1,0,0,0,0,0],
    [0,0,0,0,0,0,0,1,0,0,0,0],
    [0,0,0,0,0,0,0,0,1,0,0,0],
    [0,0,0,0,0,0,0,0,0,1,0,0],
    [0,0,0,0,0,0,0,0,0,0,1,0],
    [0,0,0,0,0,0,0,0,0,0,0,1],
]

G1 = concat(I_12, A)
G2 = concat(A, I_12)

q = 2

#====================
# CASE 1 & 2
#====================

S1s = mult(ds, transpose(G1))
S2s = mult(ds, transpose(G2))

for i in range(len(S1s)):
    totalSum1 = sum(S1s[i])
    totalSum2 = sum(S2s[i])
    print(f'{i}: left: {totalSum1} right: {totalSum2}')
    print("        S1=", S1s[i])

print('------------------------------')

#====================
# CASE 1 results
#====================

e0 =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
e6 =  [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
e7 =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]
e11 = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]

#====================
# CASE 2 results
#====================
e1 =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
e5 =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
e8 =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
e12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

#====================
# CASE 3.1
#====================

d2 =  [1,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1,0,1,0,1,0,1]
d3 =  [1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1]
d4 =  [0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1]
d9 =  [1,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,1,0,1,1,1]
d10 = [1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1]
d13 = [1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,1]

d_ii = [1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1]

S1s_star = []

for i in range(12,24):
    d_i_of_12 = d_ii[:]
    d_i_of_12[i] = (d_i_of_12[i] + 1) % q
    S1s_star.append(mult([d_i_of_12], transpose(G1)))
    totalSum1 = sum(S1s_star[i-12][0])
    print(f'{i-12}: left: {totalSum1}')
    print("        d_star =", d_i_of_12)
    print("        S1_star=", S1s_star[i-12][0])

print('------------------------------')

#====================
# CASE 3.1 results
#====================

d2_d_star = [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1]
d2_S1_star= [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

d3_d_star = [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1]
d3_S1_star= [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]

d4_d_star = [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0]
d4_S1_star= [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]

d9_d_star = [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1]
d9_S1_star= [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

d13_d_star = [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0]
d13_S1_star= [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]

#====================
# CASE 3.2
#====================

d10 = [1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1]

S2s_star = []

for i in range(12):
    d_i_of_12 = d10[:]
    d_i_of_12[i] = (d_i_of_12[i] + 1) % q
    S2s_star.append(mult([d_i_of_12], transpose(G2)))
    totalSum1 = sum(S2s_star[i][0])
    print(f'{i}: left: {totalSum1}')
    print("        d_star =", d_i_of_12)
    print("        S2_star=", S2s_star[i][0])

print('------------------------------')

#====================
# CASE 3.2 results
#====================

d10_d_star = [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1]
d10_S2_star= [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]

#==================================
# Processing results
#==================================

#====================
# CASE 1
#====================

c0 = subtract_vectors(ds[0][:12], e0)
c6 = subtract_vectors(ds[6][:12], e6)
c7 = subtract_vectors(ds[7][:12], e7)
c11 = subtract_vectors(ds[11][:12], e11)

#====================
# CASE 2
#====================

c1 = ds[1][:12]
c5 = ds[5][:12]
c8 = ds[8][:12]
c12 = ds[12][:12]

#====================
# CASE 3.1
#====================

c2 = add_vectors(d2_d_star[:12], d2_S1_star)
c3 = add_vectors(d3_d_star[:12], d3_S1_star)
c4 = add_vectors(d4_d_star[:12], d4_S1_star)
c9 = add_vectors(d9_d_star[:12], d9_S1_star)
c13 = add_vectors(d13_d_star[:12], d13_S1_star)

#====================
# CASE 3.2
#====================

c10 = d10_d_star[:12]

#==================================
# Printing results
#==================================

cs = [
    c0,
    c1,
    c2,
    c3,
    c4,
    c5,
    c6,
    c7,
    c8,
    c9,
    c10,
    c11,
    c12,
    c13,
]

code_letters = conv_list_12_to_8(cs)

for j,l in enumerate(code_letters):
    l = ''.join([str(i) for i in l])
    raide = l[::-1]
    print(chr(int(raide,2)))
